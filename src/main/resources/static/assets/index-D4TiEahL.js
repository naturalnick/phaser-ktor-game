var t=Object.defineProperty,e=(e,s,i)=>((e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i)(e,"symbol"!=typeof s?s+"":s,i);import{p as s}from"./phaser-DM0uoNMb.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();class i extends s.Scene{constructor(){super("Boot")}preload(){}create(){this.scene.start("Preloader")}}class a extends s.Scene{constructor(){super({key:"FadeTransition"})}create({targetScene:t,targetMap:e,playerPosition:s,fadeColor:i=0,duration:a=500,onComplete:n}){const r=this.add.rectangle(0,0,this.scale.width,this.scale.height,i);r.setOrigin(0,0),r.setAlpha(0),this.tweens.add({targets:r,alpha:1,duration:a/2,onComplete:()=>{this.scene.start(t,{targetMap:e,playerPosition:s}),this.tweens.add({targets:r,alpha:0,duration:a/2,onComplete:()=>{this.scene.remove(this),n&&n()}})}})}}class n{constructor(t,s){e(this,"scene"),e(this,"mainCamera"),e(this,"target",null),this.scene=t,this.mainCamera=t.cameras.main,this.setupCamera(s)}setupCamera(t){if(null==t?void 0:t.bounds){const e=Math.max(0,(this.scene.scale.width-t.bounds.width)/2),s=Math.max(0,(this.scene.scale.height-t.bounds.height)/2);this.mainCamera.setBounds(0,0,t.bounds.width,t.bounds.height),this.mainCamera.setViewport(e,s,Math.min(this.scene.scale.width,t.bounds.width),Math.min(this.scene.scale.height,t.bounds.height)),this.mainCamera.setZoom(2)}(null==t?void 0:t.deadzone)&&this.mainCamera.setDeadzone(t.deadzone.width,t.deadzone.height),(null==t?void 0:t.lerp)&&this.mainCamera.setLerp(t.lerp)}startFollow(t){this.target=t,this.mainCamera.startFollow(t)}stopFollow(){this.target=null,this.mainCamera.stopFollow()}shake(t,e=.05){this.mainCamera.shake(t,e)}fade(t=1e3,e=0){return new Promise((s=>{this.mainCamera.fadeOut(t,e),this.mainCamera.once("camerafadeoutcomplete",s)}))}fadeIn(t=1e3,e=0){return new Promise((s=>{this.mainCamera.fadeIn(t,e),this.mainCamera.once("camerafadeincomplete",s)}))}}class r{constructor(t,s,i={}){e(this,"scene"),e(this,"player"),e(this,"attackKey"),e(this,"_isAttacking",!1),e(this,"cooldown"),e(this,"_range"),e(this,"damage"),e(this,"lastAttackTime",0),this.scene=t,this.player=s,this.cooldown=i.cooldown||500,this._range=i.range||30,this.damage=i.damage||20,t.input.keyboard&&(this.attackKey=t.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE),this.setupAttackInput())}get isAttacking(){return this._isAttacking}get range(){return this._range}set range(t){this._range=t}setupAttackInput(){this.attackKey.on("down",(()=>this.tryAttack()))}tryAttack(){const t=this.scene.time.now;t-this.lastAttackTime<this.cooldown||(this._isAttacking=!0,this.lastAttackTime=t,this.playAttackAnimation(),this.checkAttackCollision(),this.scene.time.delayedCall(200,(()=>{this._isAttacking=!1})))}playAttackAnimation(){const t=this.player.sprite;switch(this.player.getFacingDirection()){case"UP":t.anims.play("up",!0);break;case"DOWN":t.anims.play("down",!0);break;case"LEFT":t.anims.play("left",!0);break;case"RIGHT":t.anims.play("right",!0)}}checkAttackCollision(){const t=this.player.sprite,e=this.player.getFacingDirection();let s=t.x,i=t.y;switch(e){case"UP":i-=this.range/6;break;case"DOWN":i+=this.range/2;break;case"LEFT":s-=this.range/3.5,i+=this.range/10;break;case"RIGHT":s+=this.range/3.5,i+=this.range/10}const a=this.scene.physics.overlapCirc(s,i,this.range/2);for(const n of a){const t=n.gameObject;if(t&&t.getData&&"enemy"===t.getData("type")){const e=t.getData("enemyInstance");e&&(e.takeDamage(this.damage),this.onHit(e))}}}onHit(t){console.log("Hit enemy!")}setCooldown(t){this.cooldown=t}setDamage(t){this.damage=t}destroy(){this.attackKey.destroy()}}class h{constructor(t,s,i){e(this,"currentHealth"),e(this,"maxHealth"),e(this,"scene"),e(this,"events"),this.scene=t,this.maxHealth=s,this.currentHealth=s,this.events=i||{}}getCurrentHealth(){return this.currentHealth}getMaxHealth(){return this.maxHealth}getHealthPercentage(){return this.currentHealth/this.maxHealth*100}setHealth(t){var e,s,i,a;const n=this.currentHealth;this.currentHealth=Math.max(0,Math.min(this.maxHealth,t)),n!==this.currentHealth&&(null==(s=(e=this.events).onChange)||s.call(e,this.currentHealth,this.maxHealth)),this.currentHealth<=0&&(null==(a=(i=this.events).onDeath)||a.call(i))}heal(t){var e,s;t>0&&this.currentHealth<this.maxHealth&&(this.setHealth(this.currentHealth+t),null==(s=(e=this.events).onHeal)||s.call(e,t))}damage(t){var e,s;t>0&&(this.setHealth(this.currentHealth-t),null==(s=(e=this.events).onDamage)||s.call(e,t))}setMaxHealth(t){var e,s;this.maxHealth=t,this.currentHealth=Math.min(this.currentHealth,this.maxHealth),null==(s=(e=this.events).onChange)||s.call(e,this.currentHealth,this.maxHealth)}reset(){var t,e;this.currentHealth=this.maxHealth,null==(e=(t=this.events).onChange)||e.call(t,this.currentHealth,this.maxHealth)}}const o={shroom:{key:"shroom",name:"Mushroom",maxStack:99,sprite:"shroom",scale:.5,consumable:!0,effects:[{type:"health",value:20}]},sword:{key:"sword",name:"Sword",maxStack:1,sprite:"shroom",scale:.5,consumable:!0,effects:[{type:"health",value:20}]}};class l{constructor(t=10){e(this,"scene"),e(this,"id"),e(this,"slots"),this.id=Math.floor(100*Math.random()).toString(),this.slots=Array(t).fill(null).map((()=>({itemKey:null,count:0})))}setItem(t,e,s){const i=this.slots[t];i.itemKey=e,i.count=s}addItem(t,e=1){const s=o[t];if(!s)return!1;if(s.maxStack>1){const i=this.slots.find((e=>e.itemKey===t&&e.count<s.maxStack));if(i){const t=s.maxStack-i.count,a=Math.min(e,t);if(i.count+=a,0==(e-=a))return!0}}const i=this.slots.find((t=>null===t.itemKey));return!!i&&(i.itemKey=t,i.count=e,!0)}moveItems(t,e){if(t<0||t>=this.slots.length||e<0||e>=this.slots.length||t===e)return;const s=this.slots[t],i=this.slots[e];if(!s.itemKey)return;if(!i.itemKey)return i.itemKey=s.itemKey,i.count=s.count,s.itemKey=null,void(s.count=0);if(s.itemKey===i.itemKey){const t=o[i.itemKey];if(t.maxStack>1){const e=t.maxStack-i.count,a=Math.min(s.count,e);if(a>0)return i.count+=a,s.count-=a,void(s.count<=0&&(s.itemKey=null,s.count=0))}}const a=i.itemKey,n=i.count;i.itemKey=s.itemKey,i.count=s.count,s.itemKey=a,s.count=n}removeItem(t,e=1){const s=this.slots[t];if(!s||!s.itemKey||s.count<e)return null;const i=s.itemKey;return s.count-=e,s.count<=0&&(s.itemKey=null,s.count=0),i}getSlots(){return this.slots}getItemData(t){const e=this.slots[t];return e.itemKey?o[e.itemKey]:null}}class c{static saveGame(t){const e=t.registry.get("player"),s=t.registry.get("enemyManager"),i=t.registry.get("worldItemManager"),a={player:{health:{current:e.getHealthManager().getCurrentHealth(),max:e.getHealthManager().getMaxHealth()},position:{x:e.sprite.x,y:e.sprite.y,map:e.getCurrentMap()||"map1"},inventory:{items:e.getInventory().getSlots().map((t=>({key:t.itemKey||"",count:t.count})))}},maps:{map1:{enemies:s.getEnemySaveData(),items:i.getItems().map((t=>({key:t.getItemKey(),x:t.x,y:t.y})))}},version:this.CURRENT_VERSION,timestamp:Date.now()};localStorage.setItem(this.SAVE_KEY,JSON.stringify(a))}static saveEnemyState(t){const e=t.registry.get("player"),s=t.registry.get("enemyManager").getEnemySaveData(),i=localStorage.getItem(this.SAVE_KEY),a=JSON.parse(i||"{}");a.maps[e.getCurrentMap()??"map1"].enemies=s,localStorage.setItem(this.SAVE_KEY,JSON.stringify(a))}static saveItemState(t){const e=t.registry.get("player"),s=t.registry.get("worldItemManager"),i=localStorage.getItem(this.SAVE_KEY),a=JSON.parse(i||"{}"),n=s.getItems().map((t=>({key:t.getItemKey(),x:t.x,y:t.y})));a.maps[e.getCurrentMap()??"map1"].items=n,localStorage.setItem(this.SAVE_KEY,JSON.stringify(a))}static loadGame(t){const e=localStorage.getItem(this.SAVE_KEY);if(!e)return null;const s=JSON.parse(e);return s.version!==this.CURRENT_VERSION&&console.warn("Save data version mismatch - might need migration"),s}}e(c,"SAVE_KEY","game_save"),e(c,"CURRENT_VERSION","1.0.0");const d={baseHealth:100};class p{constructor(t,s,i){var a;e(this,"scene"),e(this,"_sprite"),this.scene=t,this._sprite=t.physics.add.sprite(s,i,"player2");const n=this._sprite.width/2.5,r=(this._sprite.width-2*n)/2,h=this._sprite.height-2*n;null==(a=this._sprite.body)||a.setCircle(n,r,h),this._sprite.setDepth(3.1),this._sprite.setCollideWorldBounds(!0),this.createAnimations()}get sprite(){return this._sprite}createAnimations(){this.scene.anims.exists("up")||this.scene.anims.create({key:"up",frames:this.scene.anims.generateFrameNumbers("player2",{start:8,end:11}),frameRate:10,repeat:-1}),this.scene.anims.exists("down")||this.scene.anims.create({key:"down",frames:this.scene.anims.generateFrameNumbers("player2",{start:0,end:3}),frameRate:10,repeat:-1}),this.scene.anims.exists("left")||this.scene.anims.create({key:"left",frames:this.scene.anims.generateFrameNumbers("player2",{start:12,end:15}),frameRate:10,repeat:-1}),this.scene.anims.exists("right")||this.scene.anims.create({key:"right",frames:this.scene.anims.generateFrameNumbers("player2",{start:4,end:7}),frameRate:10,repeat:-1})}destroy(){this._sprite.destroy()}}class g extends Phaser.GameObjects.Container{constructor(t,s,i,a){super(t,s,i),e(this,"itemKey"),e(this,"sprite"),this.itemKey=a;const n=o[a];this.sprite=t.add.sprite(0,0,n.sprite),this.sprite.setDisplaySize(16,16),this.sprite.setOrigin(-.5),this.add(this.sprite),t.add.existing(this),t.physics.add.existing(this,!1),t.tweens.add({targets:this,y:i-5,duration:1e3,yoyo:!0,repeat:-1})}getItemKey(){return this.itemKey}}class y extends p{constructor(t,s,i,a,n,o=d){var c,p;super(t,s,i),e(this,"cursors"),e(this,"inventory"),e(this,"uiManager"),e(this,"mapManager"),e(this,"worldItemManager"),e(this,"interactKey"),e(this,"dropKey"),e(this,"useKey"),e(this,"wKey"),e(this,"aKey"),e(this,"sKey"),e(this,"dKey"),e(this,"hKey"),e(this,"facingDirection","DOWN"),e(this,"healthManager"),e(this,"attackManager"),e(this,"rangeIndicator"),e(this,"showRange",!0),this.uiManager=a,this.mapManager=n,this.inventory=new l(10),this.worldItemManager=this.scene.registry.get("worldItemManager"),this.healthManager=new h(t,o.baseHealth,{onChange:(t,e)=>{this.uiManager.updateHealthBar(t,e)},onDeath:()=>{this.onDeath()}}),this.attackManager=new r(t,this,{cooldown:o.attackCooldown||500,range:o.attackRange||40,damage:o.attackDamage||20}),this.createRangeIndicator(),null==(c=t.input.keyboard)||c.addKey("R").on("down",(()=>{this.showRange=!this.showRange,this.showRange||this.rangeIndicator.clear()}));const g=t.registry.get("enemyManager");null==(p=t.input.keyboard)||p.addKey("H").on("down",(()=>{g.toggleHealthBars(),a.updateIgnoreList()})),t.input.keyboard&&(this.cursors=t.input.keyboard.createCursorKeys(),this.interactKey=t.input.keyboard.addKey("E"),this.dropKey=t.input.keyboard.addKey("Q"),this.useKey=t.input.keyboard.addKey("F"),this.wKey=t.input.keyboard.addKey("W"),this.aKey=t.input.keyboard.addKey("A"),this.sKey=t.input.keyboard.addKey("S"),this.dKey=t.input.keyboard.addKey("D")),this.setupItemInteraction(),this.updateUI(),t.events.on("playerDamaged",this.damage,this),t.events.on("itemDropped",this.tryDropItem,this),t.events.on("moveItems",this.handleMoveItems,this)}loadSaveData(t){this.healthManager=new h(this.scene,t.health.max,{onChange:(t,e)=>{this.uiManager.updateHealthBar(t,e)},onDeath:()=>{this.onDeath()}}),this.healthManager.setHealth(t.health.current),this.setPosition(t.position.x,t.position.y),t.inventory.items.forEach(((t,e)=>{t.key&&this.inventory.setItem(e,t.key,t.count)})),this.updateUI()}setPosition(t,e){this._sprite.setPosition(t,e)}updateVelocity(t,e,s,i){let a=0,n=0;s?(a=-160,this._sprite.anims.play("left",!0),this.facingDirection="LEFT"):i&&(a=160,this._sprite.anims.play("right",!0),this.facingDirection="RIGHT"),t?(n=-160,s||i||this._sprite.anims.play("up",!0),this.facingDirection="UP"):e&&(n=160,s||i||this._sprite.anims.play("down",!0),this.facingDirection="DOWN"),0!==a&&0!==n&&(a*=.707,n*=.707),this._sprite.setVelocityX(a),this._sprite.setVelocityY(n),t||e||s||i||this.attackManager.isAttacking||this._sprite.anims.pause()}getVelocity(){var t;return(null==(t=this._sprite.body)?void 0:t.velocity)??new Phaser.Math.Vector2}updateUI(){this.uiManager.updateHealthBar(this.healthManager.getCurrentHealth(),this.healthManager.getMaxHealth()),this.updateInventoryUI()}heal(t){this.healthManager.heal(t)}damage(t){this.healthManager.damage(t)}onDeath(){console.log("Player died!")}setupItemInteraction(){this.interactKey.on("down",(()=>this.tryPickupItem())),this.dropKey.on("down",(()=>this.tryDropItem())),this.useKey.on("down",(()=>this.tryUseItem()))}handleMoveItems(t,e){this.inventory.moveItems(t,e),this.updateInventoryUI()}tryPickupItem(){const t=this.scene.physics.overlapCirc(this._sprite.x,this._sprite.y,16);for(const e of t)if(e.gameObject instanceof g){const t=e.gameObject,s=t.getItemKey();if(this.inventory.addItem(s)){this.worldItemManager.removeItem(t),this.updateInventoryUI(),c.saveItemState(this.scene);break}}}tryDropItem(t){const e=this.uiManager.getInventoryUI().getSelectedSlot(),s=this.inventory.removeItem(t||e,1);if(s){const t=this._sprite.x-this._sprite.width/2,e=this._sprite.y-this._sprite.height/2;this.worldItemManager.dropItem(t,e,s),this.updateInventoryUI(),this.uiManager.updateIgnoreList(),c.saveItemState(this.scene)}}tryUseItem(){const t=this.uiManager.getInventoryUI().getSelectedSlot(),e=this.inventory.getSlots()[t];if(e.itemKey){const s=o[e.itemKey];if(s.consumable&&s.effects){let e=!1;for(const t of s.effects)"health"===t.type&&this.healthManager.getCurrentHealth()<this.healthManager.getMaxHealth()&&(this.heal(t.value),e=!0);e&&(this.inventory.removeItem(t,1),c.saveGame(this.scene),this.updateInventoryUI())}}}updateInventoryUI(){const t=this.uiManager.getInventoryUI();this.inventory.getSlots().forEach(((e,s)=>{e.itemKey?t.setItem(s,e.itemKey,e.count):t.setItem(s,"",0)}))}getHealthManager(){return this.healthManager}getInventory(){return this.inventory}getCurrentMap(){return this.mapManager.getCurrentMapId()}getFacingDirection(){return this.facingDirection}createRangeIndicator(){this.rangeIndicator=this.scene.add.graphics(),this.updateRangeIndicator()}updateRangeIndicator(){this.rangeIndicator&&this.showRange&&(this.rangeIndicator.clear(),this.rangeIndicator.lineStyle(2,4474111,.3),this.rangeIndicator.strokeCircle(this._sprite.x,this._sprite.y,this.attackManager.range),this.rangeIndicator.fillStyle(4474111,.1),this.rangeIndicator.fillCircle(this._sprite.x,this._sprite.y,this.attackManager.range))}update(){if(!this.cursors||!this._sprite.body)return;const t=this.cursors.down.isDown||this.sKey.isDown,e=this.cursors.up.isDown||this.wKey.isDown,s=this.cursors.left.isDown||this.aKey.isDown,i=this.cursors.right.isDown||this.dKey.isDown;this.updateVelocity(e,t,s,i),this.updateRangeIndicator()}destroy(){super.destroy(),this.interactKey.destroy(),this.dropKey.destroy(),this.useKey.destroy(),this.wKey.destroy(),this.aKey.destroy(),this.sKey.destroy(),this.dKey.destroy(),this.attackManager.destroy(),this.rangeIndicator.destroy()}}class m{constructor(t,s,i,a,n,r){e(this,"scene"),e(this,"trigger"),e(this,"transitionData"),e(this,"isTransitioning",!1),this.scene=t,this.transitionData=r,this.trigger=t.add.zone(s,i,a,n),t.physics.world.enable(this.trigger);const h=this.trigger.body;h.setAllowGravity(!1),h.moves=!1}addOverlapWith(t,e){this.scene.physics.add.overlap(t,this.trigger,(()=>{this.isTransitioning||(this.isTransitioning=!0,this.cleanupCurrentScene(),this.handleTransition(e))}),void 0,this)}cleanupCurrentScene(){const t=this.scene.enemyManager;t&&(c.saveEnemyState(this.scene),c.saveItemState(this.scene),t.destroy())}handleTransition(t){console.log(`Transitioning to map: ${this.transitionData.targetMap}`),this.scene.scene.launch("FadeTransition",{targetScene:"Game",targetMap:this.transitionData.targetMap,playerPosition:this.transitionData.playerPosition,fadeColor:this.transitionData.fadeColor,duration:this.transitionData.duration,onComplete:()=>{this.isTransitioning=!1,t&&t()}})}}class u{constructor(t,s=100,i=200){e(this,"sprite"),e(this,"_player"),e(this,"_hasDetectedPlayer",!1),e(this,"_lastTargetPosition"),e(this,"detectionRadius"),e(this,"escapeRadius"),e(this,"_tileLayers"),e(this,"playerPositions",new Map),this.sprite=t,this.detectionRadius=s,this.escapeRadius=i}set player(t){this._player=t}get hasDetectedPlayer(){return this._hasDetectedPlayer}get lastTargetPosition(){return this._lastTargetPosition}set lastTargetPosition(t){this._lastTargetPosition=t}set tileLayers(t){this._tileLayers=t}updatePlayerPosition(t,e,s){this.playerPositions.set(t,{x:e,y:s})}removePlayer(t){this.playerPositions.delete(t)}hasLineOfSightToPosition(t){if(!this._tileLayers)return!1;const e=new Phaser.Geom.Line(this.sprite.x,this.sprite.y,t.x,t.y),s=this._tileLayers[0].tilemap.tileWidth,i=this._tileLayers[0].tilemap.tileHeight,a=e.getPoints(0,Math.max(s,i));for(const n of a)for(const t of this._tileLayers){const e=t.getTileAtWorldXY(n.x,n.y);if(e&&e.collides)return!1}return!0}findNearestVisibleTarget(){let t;if(this._player){const e={x:this._player.x,y:this._player.y},s=Phaser.Math.Distance.Between(this.sprite.x,this.sprite.y,e.x,e.y);s<=this.escapeRadius&&this.hasLineOfSightToPosition(e)&&(t={position:e,distance:s})}return this.playerPositions.forEach((e=>{const s=Phaser.Math.Distance.Between(this.sprite.x,this.sprite.y,e.x,e.y);s<=this.escapeRadius&&this.hasLineOfSightToPosition(e)&&(!t||s<t.distance)&&(t={position:e,distance:s})})),t}checkDetection(){const t=this.findNearestVisibleTarget();if(t){const{position:e,distance:s}=t;s<=this.detectionRadius?(this._hasDetectedPlayer=!0,this._lastTargetPosition=e):s>this.escapeRadius&&(this._hasDetectedPlayer=!1,this._lastTargetPosition=void 0)}else this._hasDetectedPlayer=!1,this._lastTargetPosition=void 0}destroy(){this.playerPositions.clear(),this._tileLayers=void 0,this._lastTargetPosition=void 0,this._hasDetectedPlayer=!1}}class f{constructor(t,s){e(this,"id"),e(this,"scene"),e(this,"_sprite"),e(this,"damage"),e(this,"speed"),e(this,"canAttack"),e(this,"moveDelay"),e(this,"obstructed",!1),e(this,"isMoving",!1),e(this,"moveTimer"),e(this,"detectionManager"),e(this,"attackDelay"),e(this,"lastAttackTime",0),e(this,"currentSpriteDepth",3),e(this,"healthManager"),e(this,"healthBar"),e(this,"healthBarWidth"),e(this,"healthBarHeight",4),e(this,"showHealthBar"),e(this,"_localControlEnabled",!0),this.id=s.id,this.scene=t,this.damage=s.damage||10,this.speed=s.speed||50,this.canAttack=s.canAttack??!0,this.attackDelay=s.attackDelay||1e3,this.moveDelay=s.moveDelay||0,this._sprite=t.physics.add.sprite(s.x,s.y,"slime"),this._sprite.setData("type","enemy"),this._sprite.setData("enemyInstance",this),this._sprite.name=`enemy-${this.id}`,this.detectionManager=new u(this._sprite,s.detectionRadius,s.escapeRadius),this.healthManager=new h(t,s.health,{onChange:(t,e)=>{this.onHealthChange(t,e)},onDeath:()=>{this.onDeath()}}),this.showHealthBar=s.showHealthBar??!1,this.showHealthBar&&this.createHealthBar(),this.setupPhysics(),this.startMovementCycle()}set localControlEnabled(t){this._localControlEnabled=t}get sprite(){return this._sprite}updatePlayerPosition(t,e,s){this.detectionManager.updatePlayerPosition(t,e,s)}removePlayer(t){this.detectionManager.removePlayer(t)}createHealthBar(){this.healthBarWidth=.75*this.sprite.width,this.healthBar=this.scene.add.graphics(),this.updateHealthBar(),this.healthBar.setDepth(this.currentSpriteDepth+.1)}updateHealthBar(){if(!this.healthBar||!this.showHealthBar)return;this.healthBar.clear();const t=this.healthManager.getCurrentHealth()/this.healthManager.getMaxHealth(),e=this.sprite.x-this.healthBarWidth/2,s=this.sprite.y-this.sprite.displayHeight/2-this.healthBarHeight-5;this.healthBar.fillStyle(8421504,.8),this.healthBar.fillRect(e,s,this.healthBarWidth,this.healthBarHeight),this.healthBar.fillStyle(65280,1),this.healthBar.fillRect(e,s,this.healthBarWidth*t,this.healthBarHeight),this.healthBar.setDepth(this.sprite.depth+.1)}setHealthBarVisible(t){this.showHealthBar=t,t&&!this.healthBar?this.createHealthBar():!t&&this.healthBar&&(this.healthBar.destroy(),this.healthBar=void 0)}setupPhysics(){var t;const e=this.sprite.width/3,s=(this.sprite.width-2*e)/2,i=this.sprite.height-2*e;null==(t=this.sprite.body)||t.setCircle(e,s,i),this.sprite.setScale(.5),this.sprite.setDepth(this.currentSpriteDepth),this.sprite.setCollideWorldBounds(!0)}startMovementCycle(){0!==this.moveDelay?(this.moveTimer=this.scene.time.addEvent({delay:this.moveDelay,callback:()=>{this.isMoving?this.stopMoving():this.startMoving()},loop:!0}),this.startMoving()):this.startMoving()}moveTowardsTarget(){var t;if(!this.isMoving||!this.detectionManager.lastTargetPosition)return;const e=this.detectionManager.lastTargetPosition.x-this.sprite.x,s=this.detectionManager.lastTargetPosition.y-this.sprite.y,i=Math.atan2(s,e);this.sprite.setVelocityX(Math.cos(i)*this.speed),this.sprite.setVelocityY(Math.sin(i)*this.speed),this.sprite.setFlipX(((null==(t=this.sprite.body)?void 0:t.velocity.x)??0)>0)}moveRandomly(){var t,e,s,i,a;if(this.isMoving)if(0===(null==(t=this.sprite.body)?void 0:t.velocity.length())){const t=Math.random()*Math.PI*2;this.sprite.setVelocityX(Math.cos(t)*this.speed),this.sprite.setVelocityY(Math.sin(t)*this.speed),this.sprite.setFlipX(Math.cos(t)>0)}else this.obstructed&&(this.sprite.setVelocityX(-((null==(s=null==(e=this.sprite.body)?void 0:e.velocity)?void 0:s.x)??0)),this.sprite.setVelocityY(-((null==(a=null==(i=this.sprite.body)?void 0:i.velocity)?void 0:a.y)??0)),this.obstructed=!1)}startMoving(){this.isMoving=!0}stopMoving(){this.isMoving=!1,this.sprite.setVelocity(0,0)}setSpriteDepth(){var t,e;((null==(t=this.detectionManager.player)?void 0:t.y)??0)<this.sprite.y&&2.9!==this.currentSpriteDepth?(this.sprite.setDepth(3.5),this.currentSpriteDepth=2.5):((null==(e=this.detectionManager.player)?void 0:e.y)??0)>this.sprite.y&&3.1!==this.currentSpriteDepth&&(this.sprite.setDepth(2.5),this.currentSpriteDepth=3.5)}onHealthChange(t,e){this.scene.tweens.add({targets:this.sprite,alpha:.5,duration:100,yoyo:!0,repeat:1,ease:"Linear"})}handlePlayerCollision(t){if(!this.canAttack)return;const e=this.scene.time.now;e-this.lastAttackTime>=this.attackDelay&&(this.scene.events.emit("playerDamaged",this.damage),this.lastAttackTime=e)}handleMapCollision(){this.obstructed=!0}takeDamage(t){this.healthManager.damage(t)}getEnemyPosition(){return{id:this.id,x:this.sprite.x,y:this.sprite.y}}onDeath(){this.scene.tweens.add({targets:this.sprite,alpha:0,y:this.sprite.y-16,duration:200,ease:"Power2",onComplete:()=>{this.destroy()}}),this.scene.events.emit("enemyDeath",this.id)}setTileLayers(t){this.detectionManager.tileLayers=t}setTarget(t){this.detectionManager.player=t}update(){this.detectionManager.checkDetection(),this.updateHealthBar(),this.detectionManager.hasDetectedPlayer&&this.isMoving&&this._localControlEnabled?this.moveTowardsTarget():this.isMoving&&this._localControlEnabled&&this.moveRandomly(),this.setSpriteDepth()}destroy(){this.sprite&&this.sprite.destroy(),this.moveTimer&&this.moveTimer.destroy(),this.healthBar&&this.healthBar.destroy(),this.detectionManager.destroy()}}class v{constructor(t,s){e(this,"scene"),e(this,"enemies",[]),e(this,"mapManager"),e(this,"setupComplete",!1),e(this,"showHealthBars",!1),e(this,"isControlledByHost",!1),this.scene=t,this.mapManager=s}initialize(t){const e=this.mapManager.getCurrentMap();e?this.createAndSetupEnemies(e,t):console.warn("No map available for enemy initialization")}updatePlayerPosition(t,e,s){this.enemies.forEach((i=>{i.updatePlayerPosition(t,e,s)}))}removePlayer(t){this.enemies.forEach((e=>{e.removePlayer(t)}))}createAndSetupEnemies(t,e){const s=t.getObjectLayer("Enemies");s?(this.destroy(),s.objects.forEach((t=>{var s;const i=null==(s=e.saveData)?void 0:s.find((e=>e.id===t.id));i&&(t.x=i.x,t.y=i.y);const a=new f(this.scene,{id:t.id,x:t.x||0,y:t.y||0,health:this.getPropertyValue(t,"health",100),damage:this.getPropertyValue(t,"damage",10),speed:this.getPropertyValue(t,"speed",30),canAttack:this.getPropertyValue(t,"canAttack",!0),attackDelay:this.getPropertyValue(t,"attackDelay",1e3),moveDelay:this.getPropertyValue(t,"moveDelay",2e3),showHealthBar:this.showHealthBars});a.setTarget(e.player),a.setTileLayers(e.collisionLayers);const n=a.sprite;n.setData("type","enemy"),n.name=`enemy-${a.id}`,this.setupEnemyCollisions(a,e),this.enemies.push(a)})),this.setupComplete=!0):console.warn("No enemy layer found in the map")}updateEnemyPositions(t){if(this.isControlledByHost)return;const e=this.mapManager.getCurrentMapId();t.mapId===e&&t.enemies.forEach((t=>{const e=this.enemies.find((e=>e.id===t.id));e&&this.scene.tweens.add({targets:e.sprite,x:t.x,y:t.y,duration:100,ease:"Linear"})}))}setHostControl(t){this.isControlledByHost=t,this.enemies.forEach((e=>{e.localControlEnabled=t}))}getPropertyValue(t,e,s){var i,a;return(null==(a=null==(i=t.properties)?void 0:i.find((t=>t.name===e)))?void 0:a.value)??s}setupEnemyCollisions(t,e){this.scene.physics.add.overlap(e.player,t.sprite,(()=>t.handlePlayerCollision(e.player))),e.collisionLayers.forEach((e=>{this.scene.physics.add.collider(t.sprite,e,(()=>t.handleMapCollision()))})),this.enemies.forEach((e=>{t!==e&&this.scene.physics.add.collider(t.sprite,e.sprite)}));const s=this.mapManager.getMapBounds();if(s){const e=t.sprite;e.setCollideWorldBounds(!0),e.body.setBoundsRectangle(new Phaser.Geom.Rectangle(0,0,s.width,s.height))}}toggleHealthBars(){this.showHealthBars=!this.showHealthBars,this.enemies.forEach((t=>t.setHealthBarVisible(this.showHealthBars)))}getEnemySaveData(){return this.enemies.map((t=>t.getEnemyPosition()))}update(){this.setupComplete&&this.isControlledByHost&&this.enemies.forEach((t=>t.update()))}destroy(){this.enemies.forEach((t=>t.destroy())),this.enemies=[],this.setupComplete=!1}}class M{constructor(t){e(this,"scene"),e(this,"transitions",[]),this.scene=t}loadFromTiledLayer(t){console.log("Loading transitions from layer:",t);for(const e of t.objects){const t=e,s=this.parseTransitionProperties(t);if(s){const e=new m(this.scene,t.x+t.width/2,t.y+t.height/2,t.width,t.height,s);this.transitions.push(e)}}}parseTransitionProperties(t){if(!t.properties)return null;const e=e=>{var s;const i=null==(s=t.properties)?void 0:s.find((t=>t.name===e));return i?i.value:void 0},s=e("targetMap"),i=e("targetX"),a=e("targetY"),n=e("fadeColor")||0,r=e("duration")||500;return s&&void 0!==i&&void 0!==a?{targetMap:s,playerPosition:{x:i,y:a},fadeColor:n,duration:r}:(console.warn("Transition object missing required properties:",t),null)}setupPlayerTransitions(t){this.transitions.forEach((e=>{e.addOverlapWith(t)}))}destroy(){this.transitions=[]}}class w{constructor(t){e(this,"scene"),e(this,"map"),e(this,"tilesets"),e(this,"layers"),e(this,"transitionManager"),e(this,"currentMapId"),e(this,"isLoading"),this.scene=t,this.map=null,this.tilesets=new Map,this.layers=new Map,this.transitionManager=new M(t),this.currentMapId=null,this.isLoading=!1}preload(){this.scene.load.image("tiles","assets/tilesets/FG_Grounds.png"),this.scene.load.image("tiles2","assets/tilesets/FG_Forest_Summer.png"),this.scene.load.image("tiles3","assets/tilesets/Trees_shadow_source.png")}async loadMap(t){if(this.isLoading)throw new Error("Map is already loading");try{if(this.isLoading=!0,this.destroy(),this.scene.cache.tilemap.exists(t)||(this.scene.load.tilemapTiledJSON(t,`assets/maps/${t}.tmj`),await new Promise((t=>{this.scene.load.once("complete",(()=>t())),this.scene.load.start()}))),this.map=this.scene.make.tilemap({key:t}),!this.map)throw new Error("Failed to create tilemap");const e=[{name:"FG_Grounds",key:"tiles"},{name:"FG_Forest_Summer",key:"tiles2"},{name:"Trees_shadow_source",key:"tiles3"}],s=this.loadTilesets(e),i=[{name:"BaseLayer",tilesets:["FG_Grounds"],depth:0,properties:{}},{name:"MidLayer1",tilesets:["FG_Grounds","FG_Forest_Summer","Trees_shadow_source"],depth:1,properties:{collides:!0}},{name:"MidLayer2",tilesets:["FG_Forest_Summer","Trees_shadow_source"],depth:2,properties:{collides:!0}},{name:"TopLayer",tilesets:["FG_Forest_Summer","Trees_shadow_source"],depth:4,properties:{}}];for(const t of i){const e=t.tilesets.map((t=>s[t]??(()=>{throw new Error(`Tileset ${t} not found`)})())),i=this.map.createLayer(t.name,e);i&&(i.setDepth(t.depth),t.properties.collides&&i.setCollisionByProperty({collides:!0}),this.layers.set(t.name,i))}await this.loadTransitions(),this.currentMapId=t}catch(e){throw this.destroy(),console.error("Error loading map:",e),e}finally{this.isLoading=!1}}loadTilesets(t){var e;const s={};for(const{name:i,key:a}of t){const t=null==(e=this.map)?void 0:e.addTilesetImage(i,a);if(!t)throw new Error(`Failed to load tileset: ${i}`);s[i]=t}return s}getLayer(t){return this.layers.get(t)}getLayers(){return this.layers}getCollisionLayers(){return Array.from(this.layers.values()).filter((t=>t.collisionMask))}async loadTransitions(){if(!this.map)return;const t=this.map.getObjectLayer("Transitions");t&&this.transitionManager.loadFromTiledLayer(t)}setupPlayerTransitions(t){this.transitionManager.setupPlayerTransitions(t)}getCurrentMapId(){return this.currentMapId}getCurrentMap(){return this.map}getMapBounds(){return this.map?{width:this.map.widthInPixels,height:this.map.heightInPixels}:null}destroy(){this.layers.forEach((t=>t.destroy())),this.layers.clear(),this.tilesets.clear(),this.map&&this.map.destroy(),this.map=null,this.currentMapId=null}}class I{constructor(t){e(this,"scene"),e(this,"_players",new Map),this.scene=t}get players(){return this._players}destroy(){this.players.forEach((t=>t.destroy())),this.players.clear()}}class S{constructor(t){e(this,"scene"),e(this,"container"),this.scene=t,this.container=this.scene.add.container(0,0)}getContainer(){return this.container}}class k extends S{constructor(t,s,i){super(t),e(this,"background"),e(this,"messagesText"),e(this,"inputBox"),e(this,"inputText"),e(this,"messages",[]),e(this,"config"),e(this,"isInputActive",!1),e(this,"currentInput",""),e(this,"webSocketService"),this.webSocketService=i,this.config={maxMessages:50,fontSize:16,padding:10,x:10,y:t.scale.height-s.height-10,...s},this.createChatUI(),this.setupInputHandling(),this.webSocketService.onChatMessage(((t,e)=>{this.addMessage(`Player ${t}: ${e}`)}))}createChatUI(){this.container.setPosition(this.config.x,this.config.y),this.background=this.scene.add.rectangle(0,0,this.config.width,this.config.height,0,.5).setOrigin(0,0),this.messagesText=this.scene.add.text(this.config.padding,this.config.padding,"",{fontSize:`${this.config.fontSize}px`,color:"#ffffff",wordWrap:{width:this.config.width-2*this.config.padding}}).setOrigin(0,0),this.inputBox=this.scene.add.rectangle(0,this.config.height-30,this.config.width,30,3355443).setOrigin(0,0),this.inputText=this.scene.add.text(this.config.padding,this.config.height-25,"",{fontSize:`${this.config.fontSize}px`,color:"#ffffff"}).setOrigin(0,0),this.container.add([this.background,this.messagesText,this.inputBox,this.inputText]),this.inputBox.setInteractive({useHandCursor:!0}).on("pointerdown",(()=>{this.activateInput()}))}setupInputHandling(){var t;null==(t=this.scene.input.keyboard)||t.on("keydown",(t=>{this.isInputActive&&("Enter"===t.key?this.sendMessage():"Escape"===t.key?this.deactivateInput():"Backspace"===t.key?(this.currentInput=this.currentInput.slice(0,-1),this.updateInputText()):1===t.key.length&&(this.currentInput+=t.key,this.updateInputText()))}))}activateInput(){this.isInputActive=!0,this.inputBox.setFillStyle(4473924)}deactivateInput(){this.isInputActive=!1,this.currentInput="",this.updateInputText(),this.inputBox.setFillStyle(3355443)}updateInputText(){this.inputText.setText(this.currentInput)}sendMessage(){if(this.currentInput.trim()){const t=this.scene.data.get("currentMapId")||"map1";console.log(t),this.webSocketService.sendMessage(this.currentInput,t),this.addMessage(`You: ${this.currentInput}`),this.currentInput="",this.updateInputText()}this.deactivateInput()}addMessage(t){this.messages.push(t),this.messages.length>this.config.maxMessages&&this.messages.shift(),this.updateMessages()}updateMessages(){this.messagesText.setText(this.messages.join("\n"))}handleResize(t){this.container.setPosition(this.config.x,t.height-this.config.height-10)}destroy(){var t;this.container.destroy(),null==(t=this.scene.input.keyboard)||t.off("keydown")}}class C{constructor(t){e(this,"scene"),e(this,"healthBar"),this.scene=t,this.healthBar=t.add.graphics(),this.healthBar.setScrollFactor(0,0)}update(t,e){this.healthBar.clear(),this.healthBar.fillStyle(0,.5),this.healthBar.fillRect(10,10,104,12);const s=t/e;this.healthBar.fillStyle(16711680,1),this.healthBar.fillRect(12,12,100*s,8)}getContainer(){return this.healthBar}destroy(){this.healthBar.destroy()}}class x extends S{constructor(t,s={}){super(t),e(this,"config"),e(this,"slots",[]),e(this,"selectedSlotIndex",0),e(this,"background"),e(this,"dragSprite"),e(this,"dragStartSlot",-1);const i=this.scene.cameras.getCamera("uiCamera");if(!i)throw"No Camera";const a=(s.slots||10)*(s.slotSize||48)+((s.slots||12)-1)*(s.spacing||4)+2*(s.padding||8),n=(s.slotSize||48)+2*(s.padding||8);this.config={slots:10,slotSize:48,padding:8,spacing:4,x:(null==i?void 0:i.width)-a-10,y:(null==i?void 0:i.height)-n-10,...s},this.createInventoryUI(),this.setupKeyboardControls()}createInventoryUI(){const t=this.config.slots*this.config.slotSize+(this.config.slots-1)*this.config.spacing+2*this.config.padding,e=this.config.slotSize+2*this.config.padding;this.background=this.scene.add.rectangle(0,0,t,e,0,.4).setOrigin(0,0),this.container.add(this.background),this.container.setPosition(this.config.x,this.config.y);for(let s=0;s<this.config.slots;s++){const t=this.createSlot(s);this.slots.push(t),this.container.add(t.container)}this.selectSlot(0)}createSlot(t){const e=this.config.padding+t*(this.config.slotSize+this.config.spacing),s=this.config.padding,i=this.scene.add.container(e,s),a=this.scene.add.rectangle(0,0,this.config.slotSize,this.config.slotSize,12886692,.5).setOrigin(0,0).setInteractive();return a.on("pointerdown",(()=>{this.selectSlot(t)})),a.on("pointerover",(()=>{a.setFillStyle(13939380,.5)})),a.on("pointerout",(()=>{a.setFillStyle(12886692,.5)})),i.add(a),{container:i,background:a,index:t}}setupKeyboardControls(){var t;null==(t=this.scene.input.keyboard)||t.on("keydown",(t=>{switch(t.key){case"1":this.selectSlot(0);break;case"2":this.selectSlot(1);break;case"3":this.selectSlot(2);break;case"4":this.selectSlot(3);break;case"5":this.selectSlot(4);break;case"6":this.selectSlot(5);break;case"7":this.selectSlot(6);break;case"8":this.selectSlot(7);break;case"9":this.selectSlot(8)}}))}selectSlot(t){t<0||t>=this.slots.length||(this.deselectSlots(),this.selectedSlotIndex=t,this.slots[t].background.setStrokeStyle(2,16777215))}deselectSlots(){this.slots[this.selectedSlotIndex].background.setStrokeStyle()}setItem(t,e,s=1){if(t<0||t>=this.slots.length)return;const i=this.slots[t];if(i.item&&(i.item.destroy(),i.item=void 0),i.count&&(i.count.destroy(),i.count=void 0),e){const a=o[e];if(!a)return;const n=a.sprite,r=this.scene.add.sprite(4,4,n).setOrigin(0,0).setDisplaySize(this.config.slotSize-8,this.config.slotSize-8).setInteractive({draggable:!0});r.setData("slotIndex",t),r.on("dragstart",(e=>{const s=this.scene.cameras.getCamera("uiCamera"),i=Math.max(0,(this.scene.scale.width-((null==s?void 0:s.width)??0))/2);this.dragStartSlot=t,this.dragSprite=this.scene.add.sprite(e.x-i,e.y,n).setDisplaySize(this.config.slotSize-8,this.config.slotSize-8).setDepth(1e3),r.setAlpha(.5)})),r.on("drag",(t=>{if(this.dragSprite){const e=this.scene.cameras.getCamera("uiCamera"),s=Math.max(0,(this.scene.scale.width-((null==e?void 0:e.width)??0))/2);this.dragSprite.setPosition(t.x-s,t.y)}})),r.on("dragend",(t=>{const e=this.scene.cameras.getCamera("uiCamera"),s=Math.max(0,(this.scene.scale.width-((null==e?void 0:e.width)??0))/2),i=this.getSlotFromPosition(t.x-s,t.y);null!==i&&i!==this.dragStartSlot?this.scene.events.emit("moveItems",this.dragStartSlot,i):this.isPointerOverInventory(t)||(this.scene.events.emit("itemDropped",this.dragStartSlot),this.setItem(this.dragStartSlot,"")),r.setAlpha(1),this.dragSprite&&(this.dragSprite.destroy(),this.dragSprite=void 0)})),i.container.add(r),i.item=r,s>1&&(i.count=this.scene.add.text(this.config.slotSize-2,this.config.slotSize-2,s.toString(),{fontSize:"12px",color:"#ffffff",stroke:"#000000",strokeThickness:4}).setOrigin(1,1),i.container.add(i.count))}}getSlotFromPosition(t,e){if(!this.container.getBounds().contains(t,e))return null;const s=t-this.container.x,i=e-this.container.y,a=this.config.slotSize+this.config.spacing,n=Math.floor((s-this.config.padding)/a);return n>=0&&n<this.config.slots&&i>=this.config.padding&&i<=this.config.padding+this.config.slotSize?n:null}isPointerOverInventory(t){const e=this.container.getBounds(),s=this.scene.cameras.getCamera("uiCamera"),i=Math.max(0,(this.scene.scale.width-((null==s?void 0:s.width)??0))/2);return e.setSize(e.width+16,e.height+16),e.contains(t.x-i,t.y)}getSelectedSlot(){return this.selectedSlotIndex}handleResize(t){const e=this.scene.cameras.getCamera("uiCamera");if(!e)return;const s=(null==e?void 0:e.width)-this.background.width-10,i=(null==e?void 0:e.height)-this.background.height-10;this.container.setPosition(s,i)}destroy(){var t;this.dragSprite&&this.dragSprite.destroy(),this.slots.forEach((t=>{t.item&&t.item.removeAllListeners(),t.background.removeAllListeners(),t.background.disableInteractive()})),null==(t=this.scene.input.keyboard)||t.off("keydown"),this.container.destroy()}}class P{constructor(t,s){e(this,"scene"),e(this,"uiCamera"),e(this,"uiContainer"),e(this,"config"),e(this,"healthBarUI"),e(this,"inventoryUI"),e(this,"chatUI",null),this.scene=t,this.config=s,this.uiContainer=this.scene.add.container(0,0),this.uiContainer.setScrollFactor(0);const{xMargin:i,yMargin:a,viewportWidth:n,viewportHeight:r}=this.calculateViewportDimensions();this.uiCamera=this.scene.cameras.add(i,a,n,r),this.uiCamera.setName("uiCamera"),this.healthBarUI=new C(t),this.inventoryUI=new x(t),this.uiContainer.add([this.healthBarUI.getContainer(),this.inventoryUI.getContainer()]),this.updateCameraIgnoreList(),this.scene.cameras.main.ignore([this.uiContainer]),this.scene.scale.on("resize",this.handleResize,this)}initializeChatUI(t){this.chatUI=new k(this.scene,{width:300,height:200},t),this.uiContainer.add(this.chatUI.getContainer())}calculateViewportDimensions(){var t,e,s,i;const a=(null==(e=null==(t=this.config)?void 0:t.bounds)?void 0:e.width)??this.scene.scale.width,n=(null==(i=null==(s=this.config)?void 0:s.bounds)?void 0:i.height)??this.scene.scale.height;return{xMargin:Math.max(0,(this.scene.scale.width-a)/2),yMargin:Math.max(0,(this.scene.scale.height-n)/2),viewportWidth:Math.min(this.scene.scale.width,a),viewportHeight:Math.min(this.scene.scale.height,n)}}handleResize(t){var e;const{xMargin:s,yMargin:i,viewportWidth:a,viewportHeight:n}=this.calculateViewportDimensions();this.uiCamera.setViewport(s,i,a,n),null==(e=this.chatUI)||e.handleResize(t),this.inventoryUI.handleResize(t)}updateCameraIgnoreList(){this.uiCamera.ignore(this.scene.children.list.filter((t=>t!==this.uiContainer&&(Phaser.GameObjects.Sprite,!0))))}getUIContainer(){return this.uiContainer}getUICamera(){return this.uiCamera}getInventoryUI(){return this.inventoryUI}updateHealthBar(t,e){this.healthBarUI.update(t,e)}updateIgnoreList(){this.updateCameraIgnoreList()}destroy(){this.uiCamera.destroy(),this.uiContainer.destroy(),this.scene.scale.off("resize",this.handleResize)}}class b{constructor(t){e(this,"scene"),e(this,"worldItems",[]),e(this,"defaultStartPositions",[{x:600,y:600,key:"sword"},{x:200,y:150,key:"shroom"},{x:300,y:200,key:"shroom"}]),this.scene=t,this.scene.registry.set("worldItems",this.worldItems)}loadItems(t){this.clearItems(),t?this.loadSavedItems(t):this.loadDefaultItems()}loadSavedItems(t){t.forEach((t=>{const e=new g(this.scene,t.x,t.y,t.key);this.worldItems.push(e)}))}loadDefaultItems(){this.defaultStartPositions.forEach((t=>{const e=new g(this.scene,t.x,t.y,t.key);this.worldItems.push(e)}))}dropItem(t,e,s){const i=new g(this.scene,t,e,s);return this.worldItems.push(i),i}removeItem(t){const e=this.worldItems.indexOf(t);e>-1&&(this.worldItems.splice(e,1),t.destroy())}clearItems(){this.worldItems.forEach((t=>t.destroy())),this.worldItems=[],this.scene.registry.set("worldItems",this.worldItems)}getItems(){return this.worldItems}destroy(){this.clearItems()}}class D extends p{constructor(t,e,s){super(t,e,s)}moveTo(t,e){this.scene.tweens.add({targets:this._sprite,x:t,y:e,duration:100,ease:"Linear"})}update(){}}class _{constructor(t,s,i){e(this,"socket"),e(this,"scene"),e(this,"messageHandlers",[]),e(this,"uiManager"),e(this,"isEnemyHost",!1),e(this,"enemyUpdateInterval",null),e(this,"playerManager"),this.scene=t,this.uiManager=s,this.playerManager=i;const a=Math.floor(100*Math.random()).toString();this.socket=new WebSocket(`ws://localhost:8080/game?id=${a}`),this.setupSocketListeners()}setupSocketListeners(){this.socket.onmessage=t=>{const e=JSON.parse(t.data);switch(e.type){case"PlayerJoin":this.handlePlayerJoin(e.id,e.x,e.y);break;case"ChatMessage":this.handleChatMessage(e.id,e.message);break;case"PlayerMove":this.handlePlayerMove(e.id,e.x,e.y);break;case"EnemyHost":this.handleEnemyHost(e.hostId);break;case"EnemyUpdate":this.handleEnemyUpdate(JSON.stringify(e.data.enemies));break;case"PlayerLeave":this.handlePlayerLeave(e.id)}}}sendPosition(t,e,s){if(this.socket.readyState===WebSocket.OPEN){const i={type:"PlayerMove",id:this.getPlayerId(),x:t,y:e,mapId:s};this.socket.send(JSON.stringify(i))}}sendMessage(t,e){if(this.socket.readyState===WebSocket.OPEN){const s={type:"ChatMessage",id:this.getPlayerId(),message:t,mapId:e};this.socket.send(JSON.stringify(s))}}initializeConnection(t,e,s){const i={type:"PlayerJoin",id:this.getPlayerId(),x:t,y:e,mapId:s};this.socket.readyState===WebSocket.OPEN?this.socket.send(JSON.stringify(i)):this.socket.onopen=()=>{this.socket.send(JSON.stringify(i))}}startEnemyBroadcast(t){this.enemyUpdateInterval=window.setInterval((()=>{if(this.socket.readyState===WebSocket.OPEN){const e=t.getEnemySaveData(),s=this.scene.registry.get("currentMapId"),i={type:"EnemyUpdate",id:this.getPlayerId(),data:{mapId:s,enemies:e}};this.socket.send(JSON.stringify(i))}}),100)}getPlayerId(){return this.socket.url.split("id=")[1]}handlePlayerJoin(t,e,s){if(!this.playerManager.players.has(t)){const i=new D(this.scene,e,s);this.playerManager.players.set(t,i),this.scene.registry.get("enemyManager").updatePlayerPosition(t,e,s),this.uiManager.updateIgnoreList()}}handlePlayerMove(t,e,s){if(!this.playerManager.players.has(t))return void this.handlePlayerJoin(t,e,s);const i=this.playerManager.players.get(t);i&&(i.moveTo(e,s),console.log("Player moved to:",e,s),this.scene.registry.get("enemyManager").updatePlayerPosition(t,e,s))}handlePlayerLeave(t){const e=this.playerManager.players.get(t);e&&(e.destroy(),this.playerManager.players.delete(t),this.scene.registry.get("enemyManager").removePlayer(t))}handleChatMessage(t,e){this.messageHandlers.forEach((s=>s(t,e)))}onChatMessage(t){this.messageHandlers.push(t)}handleEnemyHost(t){const e=this.scene.registry.get("enemyManager");if(!e)return;const s=t===this.socket.url.split("id=")[1];this.isEnemyHost=s,s?(this.startEnemyBroadcast(e),e.setHostControl(s)):this.stopEnemyBroadcast()}handleEnemyUpdate(t){if(this.isEnemyHost)return;const e=this.scene.registry.get("enemyManager");if(e)try{const s=JSON.parse(t);e.updateEnemyPositions(s)}catch(s){console.error("Error parsing enemy data:",s)}}stopEnemyBroadcast(){null!==this.enemyUpdateInterval&&(clearInterval(this.enemyUpdateInterval),this.enemyUpdateInterval=null)}closeConnection(){this.socket.close()}destroy(){this.stopEnemyBroadcast(),this.socket.close(),this.playerManager.destroy(),this.messageHandlers=[]}}class H extends s.Scene{constructor(){super("Game"),e(this,"webSocketService"),e(this,"cameraController"),e(this,"mapManager"),e(this,"player"),e(this,"uiManager"),e(this,"enemyManager"),e(this,"worldItemManager"),e(this,"playerManager")}preload(){this.load.image("slime","assets/sprites/RPG_Monster_024_2.png"),this.load.spritesheet("player2","assets/sprites/Character_016_Walk.png",{frameWidth:16,frameHeight:32}),this.load.image("shroom","https://p.novaskin.me/3123273216.png"),this.mapManager=new w(this),this.mapManager.preload()}async create(){const t=this.scene.settings.data;this.registry.set("currentMapId",(null==t?void 0:t.targetMap)||"map1"),await this.mapManager.loadMap((null==t?void 0:t.targetMap)||"map1");const e=this.mapManager.getMapBounds();if(e){this.setupManagers(e),this.setupPlayer(e,null==t?void 0:t.playerPosition);const s=c.loadGame(this);s&&this.player.loadSaveData(s.player),this.setupGame(s),this.setupEventListeners(e)}}setupManagers(t){this.uiManager=new P(this,{bounds:{width:t.width,height:t.height}}),this.worldItemManager=new b(this),this.registry.set("worldItemManager",this.worldItemManager),this.enemyManager=new v(this,this.mapManager),this.registry.set("enemyManager",this.enemyManager),this.playerManager=new I(this),this.registry.set("playerManager",this.playerManager)}setupPlayer(t,e){const s=e||{x:this.scale.width<t.width?this.scale.width/2:t.width/2,y:this.scale.height<t.height?this.scale.height/2:t.height/2};this.player=new y(this,s.x,s.y,this.uiManager,this.mapManager),this.registry.set("player",this.player)}setupGame(t){this.mapManager.setupPlayerTransitions(this.player.sprite),this.enemyManager.initialize({player:this.player.sprite,collisionLayers:this.mapManager.getCollisionLayers(),saveData:null==t?void 0:t.maps.map1.enemies}),this.webSocketService=new _(this,this.uiManager,this.playerManager),this.webSocketService.initializeConnection(this.player.sprite.x,this.player.sprite.y,"map1"),new m(this,100,300,16,16,{targetMap:"map1",playerPosition:{x:200,y:200},fadeColor:0,duration:500}).addOverlapWith(this.player.sprite,(()=>console.log("here"))),this.uiManager.initializeChatUI(this.webSocketService),this.worldItemManager.loadItems(null==t?void 0:t.maps.map1.items),this.uiManager.updateIgnoreList(),this.mapManager.getCollisionLayers().forEach((t=>{this.physics.add.collider(this.player.sprite,t)}))}setupEventListeners(t){this.physics.world.setBounds(-16,-16,t.width+32,t.height+32);const e={lerp:.1,bounds:{x:0,y:0,width:t.width,height:t.height}};this.cameraController=new n(this,e),this.cameraController.startFollow(this.player.sprite),this.scale.on("resize",(()=>{this.cameraController.setupCamera(e)})),this.game.events.on("blur",(()=>{c.saveGame(this)})),window.addEventListener("beforeunload",(()=>{c.saveGame(this),console.log("Window closed")}))}update(){var t,e;if(null==(t=this.player)||t.update(),null==(e=this.enemyManager)||e.update(),this.player&&(0!==this.player.getVelocity().x||0!==this.player.getVelocity().y)){const t=this.player.sprite;this.webSocketService.sendPosition(t.x,t.y,this.mapManager.getCurrentMapId())}}destroy(){var t,e,s;null==(t=this.webSocketService)||t.destroy(),null==(e=this.enemyManager)||e.destroy(),null==(s=this.worldItemManager)||s.destroy()}}class E extends s.Scene{constructor(){super("MainMenu"),e(this,"title")}create(){this.title=this.add.text(this.scale.width/2,this.scale.height/2,"Main Menu",{fontFamily:"Arial Black",fontSize:38,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}).setOrigin(.5),this.scene.start("Game")}}class B extends s.Scene{constructor(){super("Preloader")}init(){this.add.image(512,384,"background"),this.add.rectangle(512,384,468,32).setStrokeStyle(1,16777215);const t=this.add.rectangle(282,384,4,28,16777215);this.load.on("progress",(e=>{t.width=4+460*e}))}preload(){this.load.setPath("assets")}create(){this.scene.start("MainMenu")}}const T={type:Phaser.AUTO,parent:"game-container",backgroundColor:"#000",pixelArt:!0,width:window.innerWidth,height:window.innerHeight,scale:{mode:Phaser.Scale.RESIZE,autoCenter:Phaser.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!0}},scene:[i,B,E,H,a]};new s.Game(T);
